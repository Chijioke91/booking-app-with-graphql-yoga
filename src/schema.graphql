type Query {
  welcome: String!
  me: User!
  event(id: ID!): Event!
  events: [Event!]!
  users: [User!]!
  booking(id: ID!): Booking!
  bookings: [Booking!]!
}

type Mutation {
  createEvent(data: CreateEventInput): Event
  createUser(data: AuthInput): AuthPayload!
  loginUser(data: AuthInput): AuthPayload!
  bookEvent(eventId: ID!): Booking!
  cancelBooking(bookingId: ID!): Event!
}

type Booking {
  id: ID!
  event: Event!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type Event {
  id: ID!
  title: String!
  description: String!
  price: Float!
  date: String!
  createdBy: User!
}

type User {
  id: ID!
  email: String!
  password: String
  createdEvents: [Event!]
}

type AuthPayload {
  user: User!
  token: String!
}

input CreateEventInput {
  title: String!
  description: String!
  price: Float!
  date: String
}

input AuthInput {
  email: String!
  password: String!
}
